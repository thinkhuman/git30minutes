{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Git in 30 Minutes: A Beginner's Guide for Technical Writers","text":"<p>Welcome to Git in 30 Minutes: A Beginner\u2019s Guide for Technical Writers. Within about 30 minutes, you'll learn the basics of Git, the distributed version control system that has become an indispensable tool for countless developers, writers, and others. In this eBook, you'll create and use a simple project to help you get up and running.</p> <p>Here's the process you'll follow to learn Git fast:</p> <ol> <li>Set up and initialize a project</li> <li>Make a 'commit'</li> <li>Check your project's status</li> <li>Create and use a project 'branch'</li> <li>Connect with a remote Git repository on Github</li> <li>Learn about next steps for growing your skills</li> </ol> <p>When you're done, you'll be able to:</p> <ol> <li>Install Git and use it to apply version control to your project</li> <li>Use branching and remote repositories (like Github) to collaborate with others</li> <li>Know where to go to learn more and grow your skills</li> </ol> <p>A few assumptions</p> <ul> <li>You can use a terminal on your computer to enter basic commands. If you don't yet know how to use a terminal, see the Command Line Crash Course section at the end of the book.</li> <li>You're new to version control, and perhaps technical software tools in general.</li> </ul>"},{"location":"#what-about-visual-git-tools","title":"What about visual Git tools?","text":"<p>There are several visual Git tools (desktop applications) that don't require using the command line, and development environments that come with Git features already integrated. These are great! </p> <p>But for your first steps with Git, I strongly recommend learning basic operations on the command line first; starting this way helps you better understand how Git works as you encounter different environments and projects. </p>"},{"location":"01-setup/","title":"Step 1: Set Up and Initialize Your Project","text":"<p>A project is just one or more files that you want to apply Git version control to. Often this includes files in several directories and subdirectories, but for now you'll just use one directory and one file.</p> <p>A: Install Git</p> <p>First, ensure Git is installed on your system. You can download it from git-scm.com, and it\u2019s available for Windows, Mac, and Linux.</p> <p>NOTE: If you're familiar with using package managers like Homebrew (MacOS), apt (Linux), or Chocolatey (Windows), feel free to use that installation method instead.</p> <p>B: Create Your Project Directory</p> <p>Create a new directory on your computer, and move to that directory.</p> <ol> <li><code>mkdir example-project</code></li> <li><code>cd example-project</code></li> </ol> <p>C: Initialize Git</p> <p>'Initializing' Git means setting up Git in your project's directory to create a repository. A repository is the entire working environment that's being tracked with Git. It includes your project files and the <code>.git</code> directory you're creating below.</p> <p><code>git init</code></p> <p>This command creates a new <code>.git</code> directory in your project folder, which Git uses to track project changes.</p> <p>IMPORTANT: don't delete or otherwise modify this directory while working on your project, or you'll lose all of the project history that Git tracks.</p>"},{"location":"02-first-commit/","title":"Step 2: Make Your First Commit","text":"<p>A commit is a record of the changes you've made to files that are in your Git repository. </p> <p>Think of making a commit as saving your work with a note (a 'commit message') about what you did, and why. </p> <p>Git gives each commit you make a special code (a unique 40-character string called a 'hash') so you can find it later if you need to. You'll sometimes use this special code to 'revert' to a previous version of one or more files, or to share with other people.</p> <p>A: Create Your First Project File</p> <p>In the <code>example-project</code> directory, create a new file named <code>README.md</code>.</p> <ul> <li>On Unix-based systems like MacOS or Linux, you can use <code>touch README.md</code>.</li> <li>On Windows, create a new text file and rename it to <code>README.md</code>.</li> </ul> <p>B: Stage Changes</p> <p>Staging is the preliminary step where you prepare and organize your changes before committing them to the Git repository. </p> <p>Think of staging as packing a box for delivery. You decide which items (changes) you want to send off (commit), and you put them in the box (staging). Once you're happy with what's in the box, you seal it and send it (commit the changes). This allows you to choose which changes to commit, which becomes more important when you have multiple files.</p> <p>In the <code>example-project</code> directory, stage the new file for commit:</p> <p><code>git add README.md</code></p> <p>Git is now tracking changes made to <code>README.md</code>.</p> <p>C: Commit Your Changes</p> <p>Now, your changes are staged and ready to be commited to the Git repository.</p> <p>In the <code>example-project</code> directory, commit your staged files:</p> <p><code>git commit -m \"Initial commit with README\"</code></p> <p>Here's how that command works:</p> <ol> <li><code>git commit</code>: The Git command to save changes to the local repository. </li> <li><code>-m</code>: An option (often called a 'flag') for the <code>git commit</code> command. The <code>-m</code> stands for \"message\", which just means \"I'm adding a commit message right after this\".</li> <li><code>\"Initial commit with README\"</code>: The commit message that you're including with the <code>-m</code> option. </li> </ol> <p>NOTE: Commit messages should be descriptive, so you (and others) can easily understand what changes were made. This becomes more important as you create several versions over longer periods of time, and forget what changes were made.</p>"},{"location":"03-status/","title":"Step 3: Check Status and Make Changes","text":"<p>While you're working, you'll often want to know: what's the status of my project files? Did I already stage this file? Are there files I haven't started tracking yet? </p> <p>A: Check the status of your project</p> <p>In the <code>example-project</code> directory, check the status of your repository:</p> <p><code>git status</code></p> <p>This will list which files are staged, unstaged, or untracked.</p> <p>B: Modify Files and Commit Again</p> <p>Make a few changes to <code>README.md</code>. When you're done, stage and commit those changes:</p> <p>Stage: <code>git add README.md</code></p> <p>Commit: <code>git commit -m \"Update README with project information\"</code></p>"},{"location":"04-branching/","title":"Step 4: Branch Out","text":"<p>A branch is a way to work separately on different parts of a project at the same time, without affecting the main project (often called the \"master\" or \"main\" branch). You can think of it as a parallel universe where you can make changes or try out new ideas and, when you're ready, bring those changes back into the main project.</p> <p>In simple terms, imagine you're writing a story in a notebook. A branch is a separate copy of the notebook. In this copy, you (or someone else) can make changes, add new characters, or change the plot without messing up the original story. Later, if you like the changes, you can merge them into the main notebook (and Git helps you resolve any differences between the two notebooks). </p> <p>A: Creating a New Branch</p> <p>In the <code>example-project</code> directory, create a new branch named <code>feature-x</code>:</p> <p><code>git branch feature-x</code></p> <p>B: Switching Branches</p> <p>Switching to another branch is called checking out a branch. This just means you're leaving one branch to work on a different one.</p> <p>Now, switch to the <code>feature-x</code> branch:</p> <p><code>git checkout feature-x</code></p> <p>You've now moved to a new branch, where you can make changes without affecting the main branch.</p> <p>C: Merging Changes</p> <p>After making changes in the <code>feature-x</code> branch, merge those back into the main branch:</p> <ol> <li><code>git checkout main</code> (switch back to the original 'main' branch)</li> <li><code>git merge feature-x</code></li> </ol> <p>Now your main branch will have all the changes you made in your <code>feature-x</code> branch.</p> <p>To see your changes, open the <code>README.md</code> file in a text editor. </p> <p>Wait! Which Branch Am I On?</p> <p>To find out which branch you're on type the following command:</p> <p><code>git branch</code></p> <p>When you run this command, Git lists all the branches in your repository and puts an asterisk (*) next to the branch you're currently on. Remember: you can switch amongst different branches using <code>git checkout [branch name]</code>.</p>"},{"location":"05-remotes/","title":"Step 5: Collaborate with Remote Repositories","text":"<p>Remember, a repository is just a collection of project files. That repository could be on your local drive, on a cloud service (like Dropbox), or a specialized service like Github. Github is a website where individuals and groups can share a repository (publicly or privately). A repository that isn't on your local drive is commonly called a remote.</p> <p>Why a remote repository? </p> <p>There are two key reasons for having a remote repository like Github: </p> <ol> <li>You can store your project in a place that can be accessed from any computer where you have installed Git,</li> <li>For collaboration. Once you have a remote repository, you can easily collaborate and share changes with other people.</li> </ol> <p>About 'pushing' and 'pulling': Commiting changes to a remote repository is called pushing the changes. Getting changes from a remove repository is called pulling the changes. </p> <p>We're going to use Github to set up a remote repository where you can push and pull changes. </p> <p>A: Sign up for  a Github account</p> <p>NOTE: If you already have a Github account, you can skip this part.</p> <ol> <li>Visit the GitHub Website: Go to GitHub's website.</li> <li>Sign Up: Click on the \u201cSign up\u201d button, usually located at the top right corner.</li> <li>Enter Your Details: Fill in your email address, create a username, and set a password.</li> <li>Verify Account: Follow any verification steps required by GitHub.</li> <li>Choose a Plan: Select a plan. You can start with the free plan, which is sufficient for most individual projects.</li> <li>Complete Setup: Complete any additional steps required by GitHub to set up your account.</li> </ol> <p>B: Create a new repository on Github</p> <ol> <li>Log In to GitHub: Sign in to your GitHub account.</li> <li>Go to Repositories: Click on the \u201cRepositories\u201d tab.</li> <li>New Repository: Click the \u201cNew\u201d button, usually located near the top right.</li> <li>Repository Name: Give your repository a name that reflects your project.</li> <li>Initialize with README (Optional): You can choose to initialize your repository with a README file.</li> <li>Create Repository: Click on \u201cCreate repository.\u201d</li> </ol> <p>C: Connect to a Remote Repository</p> <p>You have to connect your local and remore repositories before you can use the remote.</p> <p>Link your local repository to the GitHub repository by adding the remote repository information:</p> <p><code>git remote add origin https://github.com/yourusername/your-repo-name.git</code></p> <p>NOTE: You'll find the actual URL on the Github page of your remote project. </p> <p>D: Push to GitHub</p> <p>Push your commits to GitHub:</p> <p><code>git push -u origin master</code> </p> <p>(for the first push; later, you can simply use <code>git push</code>)</p> <p>Your local and remote repositories are now connected; you can now work locally, and push changes to the remote whenever you like.</p> <p>E: Verify the Push</p> <p>Go back to your repository on the GitHub website, and refresh the page. Your files should now be visible there.</p> <p>F: Pull Changes</p> <p>Even though nothing has changed in the remote repository, let's practice pulling the latest changes from there:</p> <p><code>git pull origin main</code></p> <p>This will fetch the changes from the remote <code>main</code> branch and merge them into your local branch.</p> <p>You now have the following:</p> <ul> <li>A local repository with Git version control</li> <li>A remote Github repository connected to your local one, where you can push and pull changes from</li> </ul>"},{"location":"A1-resources/","title":"Where to Go Next","text":"<p>Congratulations! You already know a lot about Git--and you're ready to start using it for your own projects. As you grow more comfortable with these basics, I encourage you to keep experimenting and exploring. Consider this the beginning of your journey into a broader world of useful software tools.</p> <ul> <li>Git and Github learning resources: A free, online list of helpful learning resources from Github. When you're ready to learn more, start here.</li> <li>Pro Git Book:  A popular (and free) online book for more in-depth learning.</li> <li>How to Use Git and Github in a Team Like a Pro:  A Free Code Camp tutorial about how to collaborate with others, with a Harry Potter theme!</li> </ul>"},{"location":"A2-top10/","title":"Top 10 Most Commonly Used Git Commands","text":"<p>Here are the top 10 Git commands that you'll likely use right away. You already know most of these.</p> <p>git add</p> <p>Adds changes in the working directory to the staging area. It tells Git that you want to include updates to a particular file(s) in the next commit. However, <code>git add</code> doesn't affect the repository in any significant way\u2014changes are not actually recorded until you run <code>git commit</code>.</p> <p>Example: <code>git add .</code> (to add all changes) or <code>git add filename.txt</code> (to add a specific file)</p> <p>git branch</p> <p>Lists, creates, or deletes branches. It doesn't let you switch between branches or put a forked history back together. For that, you'll need <code>git checkout</code> or <code>git merge</code>.</p> <p>Example: <code>git branch</code> (to list branches) or <code>git branch new-branch</code> (to create a new branch)</p> <p>git checkout</p> <p>Switches branches or restores working tree files. It is a way to select which line of development you\u2019re working on.</p> <p>Example: <code>git checkout new-branch</code></p> <p>git clone</p> <p>Creates a copy of a target repository. This command is used to download the repository from an external source and initializes a new repository in the local environment, copying all the files, branches, and commits.</p> <p>Example: <code>git clone https://github.com/username/repository.git</code></p> <p>git commit</p> <p>Captures a snapshot of the project's currently staged changes. Commits can be considered as 'safe' versions of a project\u2014Git will never change them unless you explicitly ask it to.</p> <p>Example: <code>git commit -m \"Add feature X\"</code></p> <p>git init</p> <p>Initializes a new Git repository and begins tracking an existing directory. It adds a hidden subfolder within the existing directory that houses the internal data structure required for version control.</p> <p>Example: <code>git init</code></p> <p>git merge</p> <p>Combines two branches together. <code>git merge</code> will take the changes from one branch (in the same repository or from a fork) and apply them into another. This often happens as a 'pull request' in GitHub, which can be done via the command line as well.</p> <p>Example: <code>git merge new-branch</code></p> <p>git pull</p> <p>Fetches the changes from the remote repository and merges them into the local repository. This command is a combination of <code>git fetch</code> and <code>git merge</code>, where <code>git pull</code> first updates the local remote-tracking branches, and then merges the changes from the remote main branch to your local branch.</p> <p>Example: <code>git pull origin main</code></p> <p>git push</p> <p>Updates the remote repository with any commits made on the local branch. If you're working on a shared repository, <code>git push</code> is how you transfer commits from your local repository to the remote repo.</p> <p>Example: <code>git push origin main</code></p> <p>git status Displays the state of the working directory and the staging area. It lets you see which changes have been staged, which haven't, and which files aren't being tracked by Git.</p> <p>Example: <code>git status</code></p>"},{"location":"A3-example/","title":"Example Scenario Using All 10 Commands","text":"<p>Imagine you are starting a new project called \"MyProject\":</p> <ol> <li> <p>You initialize the project with Git:</p> <p><code>git init MyProject</code> <code>cd MyProject</code></p> </li> <li> <p>After working on your project, you decide to push it to a remote repository so your team can work on it. First, you clone a starter repository that your team agreed on:</p> <p><code>git clone https://github.com/username/starter-repo.git</code></p> </li> <li> <p>You add a file you just created called <code>README.md</code>:</p> </li> </ol> <p><code>git add README.md</code></p> <ol> <li> <p>You commit your changes with a message describing what you've added:</p> <p><code>git commit -m \"Initial commit with README\"</code></p> </li> <li> <p>To ensure you\u2019re ready to push your changes, you check the status:</p> <p><code>git status</code></p> </li> <li> <p>You push your commit to the newly cloned repository:</p> <p><code>git push origin main</code></p> </li> <li> <p>Your teammate has made changes to the repository, so you pull the latest changes from the remote repository:</p> <p><code>git pull origin main</code></p> </li> <li> <p>You need to work on a new feature, so you create a new branch called \"feature-x\":</p> <p><code>git branch feature-x</code></p> </li> <li> <p>You switch to the new branch to start working on it:</p> <p><code>git checkout feature-x</code></p> </li> <li> <p>After completing work on \"feature-x\", you switch back to the main branch and merge the changes from \"feature-x\" into \"main\":</p> <p><code>git checkout main</code> <code>git merge feature-x</code></p> </li> </ol>"},{"location":"A4-problems/","title":"10 Most Common Git Problems (and How To Resolve Them)","text":"<ol> <li> <p>Problem: Merge Conflicts</p> <ul> <li>Solution: When you get a merge conflict, Git will tell you which files are in conflict. Open these files and look for the lines that Git has marked with <code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>, <code>=======</code>, and <code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code>. These markers separate the conflicting changes. Manually combine the changes, then <code>add</code> and <code>commit</code> the resolved files.</li> </ul> </li> <li> <p>Problem: Committing to the Wrong Branch</p> <ul> <li>Solution: If you've accidentally committed to the wrong branch, you can undo this by switching to the correct branch and using <code>git cherry-pick</code> to apply the commit. Then, go back to the wrong branch and use <code>git reset --hard HEAD~1</code> to remove the last commit.</li> </ul> </li> <li> <p>Problem: Forgot to Add Files to a Commit</p> <ul> <li>Solution: If you forgot to add some files to your last commit, add the files with <code>git add</code> and then use <code>git commit --amend</code>. This will let you update the previous commit with the new changes.</li> </ul> </li> <li> <p>Problem: Pushing Fails due to Remote Changes</p> <ul> <li>Solution: If <code>git push</code> fails because there are remote changes you don\u2019t have, first use <code>git pull</code> to merge those changes into your local branch. Then you can push your changes after resolving any conflicts.</li> </ul> </li> <li> <p>Problem: Lost Commits or Branches</p> <ul> <li>Solution: If you've lost track of a commit or branch, use <code>git reflog</code> to find it. The reflog is a log of everything you've done in Git, and you can often find your lost commits there.</li> </ul> </li> <li> <p>Problem: Accidentally Deleted a Commit</p> <ul> <li>Solution: If you've deleted a commit by accident, <code>git reflog</code> is again your friend. Find the commit in the reflog and use <code>git checkout</code> to move to it, or use <code>git reset --hard commit_sha</code> to restore your branch to that commit.</li> </ul> </li> <li> <p>Problem: Reverting a Commit</p> <ul> <li>Solution: To undo a commit that has already been pushed, use <code>git revert commit_sha</code>. This will create a new commit that undoes the changes.</li> </ul> </li> <li> <p>Problem: Removing Untracked Files</p> <ul> <li>Solution: To clean your working directory from untracked files, use <code>git clean</code>. Be careful with this command because it will delete files from your disk. You can use <code>git clean -n</code> to do a dry run and see which files would be deleted.</li> </ul> </li> <li> <p>Problem: Git Repository is Too Large</p> <ul> <li>Solution: If your repository is too large, it might be because of large files. You can find large files with <code>git lfs (Large File Storage)</code> or rewrite history to remove them completely with <code>git filter-branch</code>. Make sure to back up your repository before doing this.</li> </ul> </li> <li> <p>Problem: Forgot to Ignore Files</p> <ul> <li>Solution: If you forgot to ignore files and they've already been added to the repository, first add them to your <code>.gitignore</code> file. Then, use <code>git rm --cached</code> to remove them from the repository without deleting them from your local filesystem.</li> </ul> <p></p> </li> </ol>"},{"location":"A5-glossary/","title":"Git Glossary","text":"<p>Add: Staging changes to include them in the next commit.</p> <p>Example: <code>git add file.txt</code></p> <p>Blame: Shows line-by-line changes for a file, including who made each change.</p> <p>Example: <code>git blame file.txt</code></p> <p>Branch: Independently evolving versions of a project. The default branch is usually called <code>master</code> or <code>main</code>.</p> <p>Example: Create a new branch with <code>git branch feature-branch</code>.</p> <p>Checkout: Switching between different versions of files.</p> <p>Example: <code>git checkout feature-branch</code></p> <p>Cherry-pick: Applying changes from a specific commit to a different branch.</p> <p>Example: <code>git cherry-pick commit_hash</code></p> <p>Clone: Making a copy of a remote repository on your local machine.</p> <p>Example: <code>git clone https://github.com/user/repo.git</code></p> <p>Commit: A snapshot of your repository's changes at a specific point in time.</p> <p>Example: <code>git commit -m \"Fixed bug\"</code></p> <p>Config: Configures Git settings.</p> <p>Example: <code>git config --global user.name \"Your Name\"</code></p> <p>Diff: A display of changes between commits or branches.</p> <p>Example: <code>git diff</code></p> <p>Fetch: Downloading changes from a remote repository without integrating them.</p> <p>Example: <code>git fetch origin</code></p> <p>Fork: A personal copy of another user's repository.</p> <p>Example: Fork a repo on GitHub via its interface.</p> <p>Gitignore File: A file that tells Git which files or directories to ignore in a project.</p> <p>Example: <code>*.log</code> in <code>.gitignore</code> ignores all <code>.log</code> files.</p> <p>HEAD: A reference to the last commit in the current checked-out branch.</p> <p>Example: <code>HEAD</code> typically points to the latest commit.</p> <p>Index (Staging Area): A place where Git holds changes before they become a commit.</p> <p>Example: Files added with <code>git add</code> go to the index.</p> <p>Init: Creates a new Git repository.</p> <p>Example: <code>git init new-repo</code></p> <p>Log: Displays the chronological commit history for a repository.</p> <p>Example: <code>git log</code></p> <p>Merge: Integrating changes from one branch into another.</p> <p>Example: <code>git merge feature-branch</code></p> <p>Merge Base: The most recent common ancestor of two branches.</p> <p>Example: Found using <code>git merge-base branch1 branch2</code></p> <p>Merge Conflict: A disagreement between changes in different branches.</p> <p>Example: Occurs during <code>git merge</code> and requires manual resolution.</p> <p>Pull: Fetching changes from a remote repository and merging them into your local branch.</p> <p>Example: <code>git pull origin main</code></p> <p>Pull Request (PR): A request to merge your changes into another branch, usually in a remote repository.</p> <p>Example: Done via GitHub's interface after pushing a branch.</p> <p>Push: Sending your local changes to a remote repository.</p> <p>Example: <code>git push origin main</code></p> <p>Rebase: Sequentially applying changes from one branch to another.</p> <p>Example: <code>git rebase main</code></p> <p>Remote: A version of your repository hosted on a network, used for sharing.</p> <p>Example: List remotes with <code>git remote -v</code>.</p> <p>Remote-tracking Branch: A reference to the state of branches in a remote repository.</p> <p>Example: <code>origin/main</code> is a remote-tracking branch.</p> <p>Repository (Repo): A database storing the history of all changes made to a project. It can be local (on your machine) or remote (like on GitHub).</p> <p>Example: Initialize a new repository with <code>git init</code>.</p> <p>Stash: Temporarily saving changes without committing them.</p> <p>Example: <code>git stash</code></p> <p>Status: Displays the state of the working directory and staging area.</p> <p>Example: <code>git status</code></p> <p>Submodule: Embedding a repository within another repository.</p> <p>Example: Adding a submodule with <code>git submodule add https://github.com/user/repo.git</code></p> <p>Tag: Marking specific points in a repository\u2019s history.</p> <p>Example: <code>git tag v1.0.0</code></p>"},{"location":"A6-cli/","title":"Command Line Crash Course","text":"<p>The command line is just a way to manually enter text commands in an application called a terminal. Instead of clicking on icons or using a graphical interface, you type commands into the terminal and receive text responses. This can be a powerful way to perform tasks, especially for tasks that don't have a graphical interface.</p> <ul> <li>To execute a command, type it in the terminal application and press <code>Enter</code> or <code>Return</code>.</li> <li>The <code>Tab</code> key can be used for auto-completing file names or commands.</li> <li><code>Command (\u2318)</code> (or <code>Ctrl</code>) + <code>C</code> can be used to stop a running command.</li> <li>The <code>up</code> and <code>down</code> arrow keys allow you to cycle through your previously used commands.</li> </ul> <p>IMPORTANT: The commands below are specific to MacOS and other Unix-based systems. Commands on Windows differ slightly than Unix-based systems; for a quick Windows-specific command line tutorial, see this one. </p> <p>The most common commands you'll use are:</p> <ol> <li> <p><code>cat</code>: Displays the content of a file or concatenates multiple files.</p> <ul> <li>Example: <code>cat file.txt</code></li> </ul> </li> <li> <p><code>cd</code>: Changes the current directory.</p> <ul> <li>Example: <code>cd Documents</code> to go to the Documents directory.</li> </ul> </li> <li> <p><code>cp</code>: Copies files or directories.</p> <ul> <li>Example: <code>cp source.txt destination.txt</code> to copy source.txt to destination.txt.</li> </ul> </li> <li> <p><code>ls</code>: Lists all files and directories in the current directory.</p> <ul> <li>Example: <code>ls</code></li> </ul> </li> <li> <p><code>man</code>: Displays the manual page for other commands.</p> <ul> <li>Example: <code>man ls</code> to see the manual for the <code>ls</code> command.</li> </ul> </li> <li> <p><code>mkdir</code>: Creates a new directory.</p> <ul> <li>Example: <code>mkdir NewFolder</code> to create a new folder named \"NewFolder\".</li> </ul> </li> <li> <p><code>mv</code>: Moves or renames files or directories.</p> <ul> <li>Example: <code>mv oldname.txt newname.txt</code> to rename a file.</li> </ul> </li> <li> <p><code>pwd</code>: Displays the path of the current working directory.</p> <ul> <li>Example: <code>pwd</code></li> </ul> </li> <li> <p><code>rm</code>: Removes files or directories.</p> <ul> <li>Example: <code>rm file.txt</code> to remove a file named \"file.txt\".</li> </ul> </li> <li> <p><code>touch</code>: Creates a new, empty file.</p> <ul> <li>Example: <code>touch newfile.txt</code></li> </ul> </li> </ol>"},{"location":"A7-about/","title":"About the Author","text":"<p>James Gill has over 25 years experience in technology as a technical writer, usability engineer, developer, and analyst. His popular book How to Get Started as a Technical Writer  has helped thousands of people launch their career in technical writing.</p>"},{"location":"buy/","title":"Buy the eBook (EPUB/PDF)","text":"<p>Buy Now</p>"}]}